import des

def run(cabbages, condition):
    first_cabbages = des.GenerateAtStart(num=3)
    cabbages_on_shelf = des.AdvanceTimeUniformDistributionRotten(low=7, high=12)
    cabbage_rotten_cntr = des.EntityCounter()
    cabbage_reorder_proc = des.AdvanceTimeUniformDistributionReordered(low=1, high=15)
    first_cabbages.set_target(cabbages_on_shelf)
    cabbages_on_shelf.set_target(cabbage_rotten_cntr)
    cabbage_rotten_cntr.set_target(cabbage_reorder_proc)
    cabbage_reorder_proc.set_target(cabbages_on_shelf)
    cust_entry = des.GenerateEntityUniformDistribution()
    cust_leave_happy_cntr = des.EntityCounter()
    cust_leave_unhappy_cntr = des.EntityCounter()
    cust_leave_happy = des.TerminateEntity()
    cust_leave_unhappy = des.TerminateEntity()
    get_cabbage = des.DisplaceEntity(from_place=cabbages_on_shelf, to=cabbage_reorder_proc)
    cust_entry.set_target(get_cabbage)
    get_cabbage.add_transition(cust_leave_happy_cntr, alternative=cust_leave_unhappy_cntr)
    get_cabbage.set_target(cust_entry)
    cust_leave_happy_cntr.set_target(cust_leave_happy)
    cust_leave_unhappy_cntr.set_target(cust_leave_unhappy)
    simulation = des.Simulation(cust_entry, first_cabbages)
    simulation.run(stop_after=(cust_leave_happy, condition))
    print(cust_leave_happy.count(), "customers went home happy with cabbages.")
    print(cust_leave_unhappy.count(), "customers went home unhappy without cabbages.")
    print(cabbage_rotten_cntr.total_count, "cabbages sadly went rotten.")